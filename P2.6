import cv2
import numpy as np

def detectar_cuadrado(frame):
    # Convertir a escala de grises
    gris = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    
    # Aplicar desenfoque para reducir ruido
    gris = cv2.GaussianBlur(gris, (5, 5), 0)
    
    # Detectar bordes con Canny
    bordes = cv2.Canny(gris, 50, 150)
    
    # Encontrar contornos
    contornos, _ = cv2.findContours(bordes, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
    
    max_area = 0
    mejor_cuadrado = None
    
    for contorno in contornos:
        # Aproximar el contorno a un polígono
        epsilon = 0.02 * cv2.arcLength(contorno, True)
        aproximacion = cv2.approxPolyDP(contorno, epsilon, True)
        
        # Si el polígono tiene 4 lados y es el más grande encontrado
        if len(aproximacion) == 4:
            area = cv2.contourArea(aproximacion)
            if area > max_area:
                max_area = area
                mejor_cuadrado = aproximacion
    
    if mejor_cuadrado is not None:
        cv2.drawContours(frame, [mejor_cuadrado], 0, (255, 0, 0), 3)  # Marco azul

def main():
    # Capturar video desde la cámara (0 indica la cámara predeterminada)
    cap = cv2.VideoCapture(0)
    
    if not cap.isOpened():
        print("Error: No se pudo abrir la cámara.")
        return
    
    while True:
        # Leer un frame de la cámara
        ret, frame = cap.read()
        
        if not ret:
            print("Error: No se pudo capturar el frame.")
            break
        
        # Detectar el cuadrado más grande en el frame
        detectar_cuadrado(frame)
        
        # Mostrar el frame en una ventana
        cv2.imshow('Video en vivo', frame)
        
        # Salir del bucle si se presiona la tecla 'q'
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break
    
    # Liberar la cámara y cerrar todas las ventanas
    cap.release()
    cv2.destroyAllWindows()

if __name__ == "__main__":
    main()
